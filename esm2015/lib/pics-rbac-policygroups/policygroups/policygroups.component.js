import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { RBACINFO } from '../@core/urls/rbac-url.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../@core/service/alert.service";
import * as i3 from "../@core/service/rbac.service";
import * as i4 from "../@core/service/data-store.service";
import * as i5 from "../@shared/alert/alert.component";
import * as i6 from "primeng/card";
import * as i7 from "../@core/directives/permission.directive";
import * as i8 from "@angular/common";
import * as i9 from "../@core/directives/show-field.directives";
import * as i10 from "primeng/inputtext";
export class PolicygroupsComponent {
    constructor(fb, alertService, groupsService, _storeservice) {
        this.fb = fb;
        this.alertService = alertService;
        this.groupsService = groupsService;
        this._storeservice = _storeservice;
        this.RBACORG = new RBACINFO();
        this.filteredPolicyGroupList = [];
        this.modelPolicyName = '';
        this.deleteactive_role = false;
        this.deleteactive_buttonok = false;
        this.validationErrors = {};
        this.formSubmit = false;
        this.initializeForm();
    }
    ngOnInit() {
        this.orgSubs = this._storeservice.currentStore.subscribe((res) => {
            this.inputValidationMethod = res['INPUTVALIDATIONMETHOD'];
            if (res['RBACORG'] && res['RBACORG'] !== '') {
                this.RBACORG = res['RBACORG'];
                this.orgId = parseInt(this.RBACORG['orgID']);
                this.httpService = res['HTTPSERVICE'];
                if (this.orgId) {
                    this.getPolicyGroupList();
                    this.getManagementGroupTree(this.orgId);
                }
            }
        });
    }
    initializeForm() {
        this.policyGroupForm = this.fb.group({
            id: [null],
            policygroupname: ['', Validators.required],
            description: ['']
        });
    }
    get formValidate() {
        return this.policyGroupForm.controls;
    }
    ngOnDestroy() {
        this.orgSubs.unsubscribe();
    }
    onInput(event, fieldtype, label, required) {
        const error = this.inputValidationMethod(event, fieldtype, label, required);
        if (error && typeof error === 'string') {
            this.validationErrors[label] = error;
        }
        else {
            delete this.validationErrors[label];
        }
    }
    getPolicyGroupList(_managementGroupId) {
        if (this.orgId) {
            this.groupsService.getOrgPolicyGroupList(this.orgId).subscribe((res) => {
                this.policyGroupList = res['data'];
                this.filteredPolicyGroupList = this.policyGroupList;
            }, (err) => console.log(err));
        }
    }
    getManagementGroupTree(organizationid) {
        this.groupsService.getManagementGroupTree(organizationid).subscribe((items) => {
            this.managementGroups = items.data;
        });
    }
    searchPolicyGroup(event) {
        const value = event.target.value.toLowerCase();
        this.filteredPolicyGroupList = this.policyGroupList.filter((a) => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.policygroupname) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(value); });
    }
    getPolicyGroupInfo(policyGroup) {
        this.validationErrors = {};
        this.formSubmit = false;
        this.policyGroupId = policyGroup.id;
        this.groupsService.getPolicyGroupById(this.policyGroupId).subscribe((res) => {
            res['data'].managementgroupid = this.managementGroups.find(item => item.id === res['data'].managementgroupid);
            this.policyGroupForm.patchValue(res['data']);
            this.attachedUsers = res['data'].users;
        });
    }
    addPolicyGroup() {
        const requestBody = [];
        this.formSubmit = true;
        this.policyGroupForm.patchValue({
            policygroupname: this.policyGroupForm.value.policygroupname.trim()
        });
        let data = this.policyGroupForm.getRawValue();
        data = Object.assign({ organizationid: this.orgId }, data);
        requestBody.push(data);
        if (this.policyGroupForm.valid) {
            if (this.policyGroupId) {
                this.groupsService.updatePolicyGroup(this.policyGroupId, data).subscribe(() => {
                    this.getPolicyGroupList();
                    this.alertService.success('Policy Group updated successfully');
                }, (_err) => this.alertService.error('Failed to update Policy Group'));
            }
            else {
                this.groupsService.createPolicyGroup(requestBody).subscribe(() => {
                    this.cancel();
                    this.getPolicyGroupList();
                    this.alertService.success('Policy Group created successfully');
                }, (err) => {
                    var _a;
                    if (err === null || err === void 0 ? void 0 : err.error) {
                        this.alertService.error((_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.message);
                    }
                    else {
                        this.alertService.error('Failed to add Policy Group');
                    }
                });
            }
        }
    }
    delete(event, id, item) {
        if ((item === null || item === void 0 ? void 0 : item.active_role) !== null) {
            this.deleteactive_role = false;
            this.deleteactive_buttonok = false;
            // Perform action when active_role is not null
            console.log('Deleting policy group with active user');
            this.modalContent = 'This group is currently associated with active roles. De-link roles from this Policy Group, to proceed with deleting.';
        }
        else {
            // Perform action when active_role is null
            console.log('Deleting policy group');
            this.modalContent = 'Are you sure you want to delete the Policy Group?';
            this.deleteactive_role = true;
            this.deleteactive_buttonok = true;
        }
        event.stopPropagation();
        this.deletedId = id;
        $('#Deleteuser').modal('show');
    }
    clearSearch(event) {
        const inputElement = document.querySelector('.form-control');
        if (inputElement) {
            inputElement.value = '';
            this.filteredPolicyGroupList = this.policyGroupList;
        }
    }
    cancel() {
        this.formSubmit = false;
        this.policyGroupForm.reset();
        this.policyGroupForm.markAsUntouched();
        this.policyGroupForm.markAsPristine();
        this.attachedUsers = [];
        this.policyGroupId = 0;
        this.validationErrors = {};
    }
    onClickAddPolicygroup() {
        this.formSubmit = false;
        this.initializeForm();
        this.policyGroupId = 0;
        this.validationErrors = {};
    }
    deletePolicyGroup() {
        this.groupsService.deletePolicyGroup(this.deletedId).subscribe(() => {
            this.cancel();
            this.alertService.success('Policy Group deleted successfully');
            $('#Deleteuser').modal('hide');
            this.getPolicyGroupList();
        }, (_err) => this.alertService.error('Failed to delete Policy Group'));
    }
    onModelPolicy(value) {
        this.modelPolicyName = value;
    }
}
PolicygroupsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PolicygroupsComponent, deps: [{ token: i1.FormBuilder }, { token: i2.AlertService }, { token: i3.RbacService }, { token: i4.DataStoreService }], target: i0.ɵɵFactoryTarget.Component });
PolicygroupsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PolicygroupsComponent, selector: "policygroups", ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"permission\">\r\n  <div class=\"row\" [formGroup]=\"policyGroupForm\">\r\n    <div class=\"col-lg-4 col-md-6 col-12\">\r\n      <div class=\"clearfix\"></div>\r\n      <div class=\"tab-content py-2\">\r\n        <div class=\"tab-pane fade show active\">\r\n            <div class=\"form-group bgiconsearch d-flex align-items-center\"> <!-- Modified line -->\r\n                <span class=\"p-input-icon-right w-100\">\r\n                    <i class=\"pi pi-times-circle\" (click)=\"clearSearch($event)\"></i>\r\n                    <input class=\"form-control\" fieldKey=\"SETTINGS_PGP_SEARCH_BY_NAME\" placeholder=\"Search by Name\" type=\"text\"\r\n                           (keyup)=\"searchPolicyGroup($event)\" />\r\n                </span>\r\n                <button type=\"button\" class=\"btn btn-primary btncommon ml-2\" (click)=\"onClickAddPolicygroup()\">Add</button> <!-- Modified line -->\r\n            </div>\r\n            <div class=\"clearfix\"></div>\r\n            <div class=\"useracess\">\r\n                <div class=\"d-flex align-items-center justify-content-center h-100 w-100 ng-star-inserted\"\r\n                     *ngIf=\"!filteredPolicyGroupList.length\">\r\n                    <p>No Record Found</p>\r\n                </div>\r\n                <ng-container *ngFor=\"let item of filteredPolicyGroupList\">\r\n                    <div class=\"row userdata align-items-center\" (click)=\"getPolicyGroupInfo(item)\" [ngClass]=\"{ active: item.id === policyGroupId }\">\r\n                        <!-- <div class=\"col-lg-2 col-md-3 col-3\">\r\n                            <img src=\"assets/images/user-empty.png\" alt=\"user\" class=\"userempty\" />\r\n                        </div> -->\r\n                        <div class=\"col-md-10 col-sm-10 col-10 overflow_txt\">\r\n                            <span class=\"nameuser\">{{ item.policygroupname }}</span> <br />\r\n                        </div>\r\n                        <div class=\"col-md-2 text-right\">\r\n                            <span class=\"right-icons\">\r\n                                <em class=\"fa fa-trash text-primary\" *showField=\"'SETTINGS_PGP_DELETE'\"\r\n                                    (click)=\"delete($event, item.id, item)\" aria-hidden=\"true\"></em>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    </div>\r\n    <div class=\"col-lg-8 col-md-6 col-12 mt-2 group-role\">\r\n      <p-card class=\"rbac-card\" styleClass=\"w-100 mb-2\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Policy Group Details</span>\r\n        </div>\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"col-lg-6 col-md-12 col-12 mb-2\">\r\n            <label for=\"policyGroup\" class=\"referral-form-labels\">Policy Group Name\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"policyGroup\" type=\"text\" formControlName=\"policygroupname\" placeholder=\"Enter Policy Group Name\"\r\n              aria-describedby=\"policyGroup\" fieldKey=\"SETTINGS_PGP_POLICY_GROUP_NAME\" [(ngModel)]=\"modelPolicyName\"\r\n              (ngModelChange)=\"onModelPolicy($event)\"\r\n              (input)=\"onInput($event, 'name', 'Policy Group Name', true)\" pInputText />\r\n              <div *ngIf=\"validationErrors['Policy Group Name']\" class=\"p-error block mt-1\">{{validationErrors['Policy Group Name']}}</div>\r\n            <div *ngIf=\"!validationErrors['Policy Group Name'] && formValidate['policygroupname'].errors && formSubmit\">\r\n              <div *ngIf=\"formValidate['policygroupname'].invalid\" class=\"p-error block mt-1\">Policy Group Name is required\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-6 col-md-12 col-12 mb-2\">\r\n            <label for=\"policyDescription\" class=\"referral-form-labels\">Description </label>\r\n            <input id=\"policyDescription\" fieldKey=\"SETTINGS_PGP_DESCRIPTION\" type=\"text\" formControlName=\"description\"\r\n              placeholder=\"Description\" aria-describedby=\"policyDescription\"\r\n              (input)=\"onInput($event, 'description', 'Description', false)\" pInputText />\r\n              <div *ngIf=\"validationErrors['Description']\" class=\"p-error block mt-1\">{{validationErrors['Description']}}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon\" fieldKey=\"SETTINGS_PGP_ADD_POLICY_GROUP\"\r\n            (click)=\"addPolicyGroup()\">\r\n            {{ policyGroupId ? 'Update Policy Group' : 'Add Policy Group' }}\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary border border-primary btncancel\"\r\n            fieldKey=\"SETTINGS_PGP_CANCEL\" (click)=\"cancel()\">\r\n            Clear\r\n          </button>\r\n          <br />\r\n          <br />\r\n        </div>\r\n        <br />\r\n      </p-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal\" id=\"Deleteuser\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" *ngIf = \"deleteactive_role\">Delete Policy Group</h5>\r\n        <h5 class=\"modal-title\" *ngIf = \"!deleteactive_role\">Warning - Policy Group</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        {{ modalContent }}\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\"\r\n            (click)=\"deletePolicyGroup()\" *ngIf = \"deleteactive_role\">\r\n            Delete\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\" *ngIf = \"deleteactive_buttonok\">\r\n            Cancel\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\" *ngIf = \"!deleteactive_buttonok\">\r\n            OK\r\n          </button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".head-div{padding-top:9px;padding-left:7px}.bgiconsearch{margin-bottom:5px;padding-bottom:0;font-size:13px}.useracess{border-radius:2px;padding:5px 0;overflow-y:auto}.userempty{max-width:none;border-radius:50%;height:35px;width:35px}.row.userdata{margin:0;border-bottom:solid 1px var(--table-border);padding:5px 0;cursor:pointer}.overflow_txt{overflow:hidden;text-overflow:ellipsis}span.nameuser{font-size:var(--font-13);color:var(--label-text);font-weight:600}.userid,span.emailuser{font-size:var(--font-13);color:#838383}.toggleleft{font-size:14px;font-weight:600;display:block;margin-top:-12px;padding-bottom:13px}.rbac-card .p-fluid .p-inputtext{padding:8px}.right-icons .fa{margin-top:3px;display:inline-block;z-index:9}.right-icons .fa-trash{font-size:18px}@media screen and (max-width: 767px){.useracess{max-height:400px}}@media screen and (min-width: 768px){.useracess{height:calc(100vh - 188px)}}@media screen and (min-width: 990px) and (max-width: 1024px){.useracess .userempty{height:100%;width:100%}}\n"], components: [{ type: i5.AlertComponent, selector: "app-alert" }, { type: i6.Card, selector: "p-card", inputs: ["header", "subheader", "style", "styleClass"] }], directives: [{ type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i9.ShowFieldDirective, selector: "[showField]", inputs: ["showField"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i10.InputText, selector: "[pInputText]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PolicygroupsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'policygroups',
                    templateUrl: './policygroups.component.html',
                    styleUrls: ['./policygroups.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.AlertService }, { type: i3.RbacService }, { type: i4.DataStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,